name: CI-CD Pipeline with SonarQube, Nexus, and Tomcat

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Build with Maven
      - name: Build project
        run: mvn clean package -DskipTests

      # Step 4: SonarQube Code Analysis
      - name: SonarQube Scan
        env:
          SONAR_HOST_URL: http://<your-sonarqube-host>:9000
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=train-ticket-reservation \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      # Step 5: Upload artifact to Nexus
      - name: Upload WAR to Nexus
        env:
          NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
          NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
        run: |
          mvn deploy \
            -Dnexus.url=http://<your-nexus-host>:8081/repository/maven-releases/ \
            -Dnexus.username=$NEXUS_USERNAME \
            -Dnexus.password=$NEXUS_PASSWORD

      # Step 6: Deploy to Tomcat
      - name: Deploy WAR to Tomcat
        env:
          URL: http://<your-tomcat-host>:8080/manager/text
          USER: ${{ secrets.TOMCAT_USER }}
          PASS: ${{ secrets.TOMCAT_PASSWORD }}
        run: |
          WAR_FILE=$(ls target/*.war | head -n 1)
          echo "Deploying $WAR_FILE to DEV ($URL)"
          curl -v -u "$USER:$PASS" "$URL/list"
          curl -v -u "$USER:$PASS" --fail --show-error -T "$WAR_FILE" \
            "$URL/deploy?path=/train-ticket-reservation&update=true"
